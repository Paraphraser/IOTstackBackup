#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER="${CONTAINER:-"influxdb2"}"

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# the compose file is
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"

# the persistent store is
INFLUXSTORE="$IOTSTACK/volumes/$CONTAINER"

# the backup directory is
INFLUXBACKUP="$INFLUXSTORE/backup"

# the engine directory is
INFLUXENGINE="$INFLUXSTORE/data/engine"

# ensure the backup directory exists
if [ ! -d "$INFLUXBACKUP" ] ; then
   echo "$INFLUXBACKUP does not exist. This is usually created by docker-compose."
   echo "Has $CONTAINER been initialised properly?"
   exit 1
fi

# is the container running?
if isContainerRunning "$CONTAINER" ; then

	# yes! prepare the environment
	echo "Clearing $INFLUXBACKUP"
	sudo rm "$INFLUXBACKUP"/*
	
	# run a backup
	echo "backing up $CONTAINER databases"
	docker exec "$CONTAINER" influx backup /var/lib/backup

	# stop the container
	echo "deactivating $CONTAINER"
	docker-compose -f "$COMPOSE" rm --force --stop -v "$CONTAINER"

	# erase the engine
	echo "removing the running databases"
	sudo rm -rf "$INFLUXENGINE"

	# start the container
	echo "starting the container"
	docker-compose -f "$COMPOSE" up -d "$CONTAINER"
	
	# wait for the container to be ready
	while ! docker exec "$CONTAINER" influx ping >/dev/null 2>&1 ; do
	   echo "waiting for $CONTAINER to become ready"
	   sleep 1
	done

	# restore from the backup just taken
	docker exec "$CONTAINER" influx restore /var/lib/backup --full

	echo "The $CONTAINER databases should be good to go"

else

	echo "$CONTAINER must be running when $SCRIPT is started"

fi

echo "$SCRIPT completed"