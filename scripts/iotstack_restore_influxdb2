#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER="${CONTAINER:-"influxdb2"}"
DEFAULTFILENAME=${DEFAULTFILENAME:-"$CONTAINER-backup.tar"}

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# $1 is required and is either path to a .tar or the path to a folder
# $2 is optional and is the runtag (yyyy-mm-dd_hhmm.host-name)
# $3 is optional and overrides the default file name

case "$#" in

  1)
    RESTORE_TAR=$(realpath "$1")
    ;;

  2 | 3)
    RESTORE_TAR=$(realpath "$1/$2.${3:-"$DEFAULTFILENAME"}")
    ;;

  *)
    echo "Usage 1: $SCRIPT path/to/$DEFAULTFILENAME"
    echo "Usage 2: $SCRIPT path/to/backupdir runtag {override}"
    echo "         (override defaults to $DEFAULTFILENAME)"
    exit 1
    ;;

esac

# it is an error if the restore tar does not exist
if [ ! -e "$RESTORE_TAR" ] ; then
   echo "Warning: $RESTORE_TAR does not exist - skipped"
   exit 0
fi

# assumptions
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"
INFLUXSTORE="$IOTSTACK/volumes/$CONTAINER"
INFLUXBACKUP="$INFLUXSTORE/backup"

# check the key assumptions
if ! [ -d "$IOTSTACK" -a -e "$COMPOSE" ] ; then
   echo "Error: One of the following does not exist:"
   echo "   $IOTSTACK"
   echo "   $COMPOSE"
   echo "This may indicate a problem with your installation."
   exit 1
fi

# check that the container is not running
if isContainerRunning "$CONTAINER" ; then
   echo "Error: $CONTAINER should NOT be running at the start of a restore."
   echo "       Please deactivate and try again."
   exit 1
fi

# now we can begin
echo "----- Starting $SCRIPT at $(date) -----"

# the whole persistent store for influxdb2 should be erased
echo "Erasing $INFLUXSTORE"
sudo rm -rf "$INFLUXSTORE"

# re-create the top level directory
sudo mkdir -p "$INFLUXSTORE"

# unpack the restore tar
echo "unpacking $RESTORE_TAR"
sudo tar -x --same-owner -f "$RESTORE_TAR" -C "$INFLUXSTORE"

# bring up the influxdb container (done early to give time to start)
echo "activating $CONTAINER (temporarily)"
docker-compose -f "$COMPOSE" up -d "$CONTAINER"

# wait for the container to be ready
while ! docker exec "$CONTAINER" influx ping >/dev/null 2>&1 ; do
   echo "waiting for $CONTAINER to become ready"
   sleep 1
done

# tell influx to perform the restore
echo "Telling $CONTAINER to restore a backup"
docker exec "$CONTAINER" influx restore /var/lib/backup --full

# take down influxdb
echo "deactivating $CONTAINER"
docker-compose -f "$COMPOSE" rm --force --stop -v "$CONTAINER"

echo "----- Finished $SCRIPT at $(date) -----"

