#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
DEFAULTFILENAME=${DEFAULTFILENAME:-"general-backup.tar.gz"}

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isStackUp() {
   if COUNT=$( \
      curl -s --unix-socket /var/run/docker.sock http://localhost/containers/json | \
      jq -c ".[].Labels.\"com.docker.compose.project\" | contains(\"$1\")" | \
      wc -l \
   ) ; then
      if [ $COUNT -gt 0 ] ; then
         return 0
      fi
   fi
   return 1
}

# snapshot the time
RUNDATE=$(date +"%Y-%m-%d_%H%M")

# $1 is required and is either path to a .tar.gz or path to a folder
# $2 is optional and is the runtag (yyyy-mm-dd_hhmm.host-name)
# $3 is optional and overrides the default file name

case "$#" in

  1)
    RESTORE_TAR_GZ=$(realpath "$1")
    ;;

  2 | 3)
    RESTORE_TAR_GZ=$(realpath "$1/$2.${3:-"$DEFAULTFILENAME"}")
    ;;

  *)
    echo "Usage 1: $SCRIPT path/to/$DEFAULTFILENAME"
    echo "Usage 2: $SCRIPT path/to/backupdir runtag {override}"
    echo "         (override defaults to $DEFAULTFILENAME)"
    exit 1
    ;;

esac

# it is an error if the restore tar does not exist
if [ ! -e "$RESTORE_TAR_GZ" ] ; then
   echo "Warning: $RESTORE_TAR_GZ does not exist - skipped"
   exit 0
fi

# assumptions
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"
SERVICESNAME="services"
SERVICESROOT="$IOTSTACK/$SERVICESNAME"
VOLUMESNAME="volumes"
VOLUMESROOT="$IOTSTACK/$VOLUMESNAME"

# check that the IOTstack folder exists
if [ ! -d "$IOTSTACK" ] ; then
   echo "Error: $IOTSTACK does not exist. This may indicate a problem with your installation."
   exit 1
fi

# does the compose file exist?
if [ -e "$COMPOSE" ] ; then

   # yes! is IOTstack (or any part of it) running?
   if isStackUp "$PROJECT"; then

      echo "Error: $PROJECT should NOT be running during a restore"
      echo "       Please deactivate $PROJECT and try the restore again"
      exit 1

   fi

fi

echo "----- Starting $SCRIPT at $(date) -----"

# make a temporary directory to unpack into
RESTOREDIR=$(mktemp -d -p "$IOTSTACK")

# define restored structures in terms of that
SERVICESRESTOREDIR="$RESTOREDIR/$SERVICESNAME"
VOLUMESRESTOREDIR="$RESTOREDIR/$VOLUMESNAME"

# unpack the general backup into that directory
echo "unpacking $RESTORE_TAR_GZ"
sudo tar -x --same-owner -z -f "$RESTORE_TAR_GZ" -C "$RESTOREDIR"

# was a "services" directory restored?
if [ -d "$SERVICESRESTOREDIR" ] ; then

   # make sure the services root exists
   mkdir -p "$SERVICESROOT"

   # iterate the restored contents
   for SPATH in "$SERVICESRESTOREDIR"/* ; do

      SNAME=$(basename "$SPATH")
      DPATH="$SERVICESROOT/$SNAME"

      echo "removing old $DPATH"
      sudo rm -rf  "$DPATH"

      echo "moving restored $SNAME into place"
      sudo mv "$SPATH" "$DPATH"

   done

   # ensure services owned by current user
   sudo chown -R "$USER:$USER" "$SERVICESROOT"
   
   # done with this directory
   sudo rm -rf "$SERVICESRESTOREDIR"

fi

# was a "volumes" directory restored?
if [ -d "$VOLUMESRESTOREDIR" ] ; then

   # make sure the volumes root exists
   sudo mkdir -p "$VOLUMESROOT"

   # iterate the restored contents
   for SPATH in "$VOLUMESRESTOREDIR"/* ; do

      SNAME=$(basename "$SPATH")
      DPATH="$VOLUMESROOT/$SNAME"

      echo "removing old $DPATH"
      sudo rm -rf  "$DPATH"

      echo "moving restored $SNAME into place"
      sudo mv "$SPATH" "$DPATH"

   done

   # done with this directory
   sudo rm -rf "$VOLUMESRESTOREDIR"

fi

# restore whatever remains into ~/IOTstack
for SPATH in "$RESTOREDIR"/* "$RESTOREDIR"/.*; do

   # is the inclusion a file (filters . .. and other junk)
   if [ -f "$SPATH" ] ; then

      SNAME=$(basename "$SPATH")
      DPATH="$IOTSTACK/$SNAME"

      # does the destination exist?
      if [ -e "$DPATH" ] ; then

         # yes! compare the two files
         cmp "$SPATH" "$DPATH" >/dev/null 2>&1

         # do the two files compare same?
         if [ $? -ne 0 ] ; then

             # no! move the restored version into place with a tag
             echo "Restoring $SNAME as $SNAME.$RUNDATE"
             mv "$SPATH" "$DPATH.$RUNDATE"

             # ensure owned by current user
             sudo chown "$USER:$USER" "$DPATH.$RUNDATE"

         else

             echo "$SNAME already exists and compares same - skipped"

         fi

      else

         # no! move the restored version into place
         echo "Restoring $SNAME"
         mv "$SPATH" "$DPATH"

         # ensure owned by current user
         sudo chown "$USER:$USER" "$DPATH"

      fi

   fi

done

echo "Cleaning up"
rm -rf "$RESTOREDIR"

echo "----- Finished $SCRIPT at $(date) -----"
