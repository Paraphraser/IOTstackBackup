#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER="${CONTAINER:-"influxdb"}"

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# the compose file is
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"

# the backup directory is
BACKUPDIR="$IOTSTACK/backups"

# ensure the backup directory exists
[ -d "$BACKUPDIR" ] || mkdir "$BACKUPDIR"

# backup paths
INFLUXBACKUPOLD="$BACKUPDIR/$CONTAINER/db_old"
INFLUXBACKUPNEW="$BACKUPDIR/$CONTAINER/db"

# the influx data directory is
INFLUXDATA="$IOTSTACK/volumes/$CONTAINER/data"

# is influx running?
if isContainerRunning "$CONTAINER" ; then

	# yes! prepare the environment
	echo "Moving old $CONTAINER backups if they exist"
	[ -d "$INFLUXBACKUPOLD" ] || sudo mkdir "$INFLUXBACKUPOLD"
	sudo rm "$INFLUXBACKUPOLD"/*
	sudo mv "$INFLUXBACKUPNEW"/* "$INFLUXBACKUPOLD"

	# execute the backup command
	echo "backing up $CONTAINER databases"
	docker exec "$CONTAINER" influxd backup -portable /var/lib/influxdb/backup

	echo "deactivating $CONTAINER"
	docker-compose -f "$COMPOSE" rm --force --stop -v "$CONTAINER"

	echo "removing the running database"
	sudo rm -rf "$INFLUXDATA"

	echo "restarting $CONTAINER"
	docker-compose -f "$COMPOSE" up -d "$CONTAINER"

	# wait for influx to be ready
	while ! docker exec "$CONTAINER" curl -s "http://localhost:8086" >/dev/null 2>&1 ; do
	   echo "waiting for $CONTAINER to become ready"
	   sleep 1
	done

	echo "reloading the influx databases"
	docker exec "$CONTAINER" influxd restore -portable /var/lib/influxdb/backup

	# define the target for the epilog which can be used to reconstruct
	# elements like continuous queries which do not survive backup/restore
	EPILOG_NAME="iotstack_restore_$CONTAINER.epilog"
	EPILOG_PATH="$IOTSTACK/services/$CONTAINER/$EPILOG_NAME"

	# does the hook script exist?
	echo "Checking for optional epilog: $EPILOG_PATH"
	if [ -f "$EPILOG_PATH" ] ; then

		# yes! copy hook script into the container at the working directory
		echo "   Epilog found - copying into container"
		docker cp "$EPILOG_PATH" "$CONTAINER:$EPILOG_NAME"

		# tell influx to process the hook script (also in the working dir)
		echo "   Telling influxd to process epilog"
		docker exec "$CONTAINER" influx -import -path "$EPILOG_NAME"

		# the hook script vanishes the next time the container is
		# recreated so there is no need to clean up.

	else

		echo "   No epilog found"

	fi

	echo "The $CONTAINER databases should be good to go"

else

	echo "$CONTAINER must be running when $SCRIPT is started"

fi

echo "$SCRIPT completed"