#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# this script should be run without arguments
[ $# -ne 0 ] && echo "$SCRIPT parameter(s) $@ ignored"

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER="${CONTAINER:-"influxdb"}"

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# assumptions
COMPOSENAME="docker-compose.yml"
CQSNAME="continuous-queries.influxql"
EPILOGNAME="iotstack_restore_$CONTAINER.epilog"

COMPOSE="$IOTSTACK/$COMPOSENAME"
BACKUPS="$IOTSTACK/backups"
EXTERNALEPILOG="$IOTSTACK/services/$CONTAINER/$EPILOGNAME"
INTERNALEPILOG="/$(uuidgen).epilog"
EXTERNALBACKUP="$BACKUPS/$CONTAINER"
EXTERNALBACKUPDB="$EXTERNALBACKUP/db"
INTERNALBACKUPDB="/var/lib/influxdb/backup"
INFLUXDATA="$IOTSTACK/volumes/$CONTAINER/data"
EXTERNALCQS="$EXTERNALBACKUPDB/$CQSNAME"
INTERNALCQS="$INTERNALBACKUPDB/$CQSNAME"

# ensure the backup directory exists
[ -d "$BACKUPS" ] || mkdir "$BACKUPS"

# is influx running?
if isContainerRunning "$CONTAINER" ; then

	# yes! execute the backup command
	echo "backing up $CONTAINER databases"
	docker exec "$CONTAINER" influxd backup -portable "$INTERNALBACKUPDB"
	
	# attempt to collect any continuous queries
	echo "Extracting any continuous queries"
	docker exec influxdb bash -c \
		"influx -execute 'SHOW CONTINUOUS QUERIES' \
		| grep 'CREATE CONTINUOUS QUERY' \
		| sed 's/^.*CREATE CONTINUOUS QUERY/CREATE CONTINUOUS QUERY/g' \
		>$INTERNALCQS"

	# remove if an empty file was created (ie no continuous queries)
	[ -f "$EXTERNALCQS" -a ! -s "$EXTERNALCQS" ] && rm "$EXTERNALCQS"

	echo "deactivating $CONTAINER"
	docker-compose -f "$COMPOSE" rm --force --stop -v "$CONTAINER"

	echo "removing the running database"
	sudo rm -rf "$INFLUXDATA"

	echo "restarting $CONTAINER"
	docker-compose -f "$COMPOSE" up -d "$CONTAINER"

	# wait for influx to be ready
	while ! docker exec "$CONTAINER" curl -s "http://localhost:8086" >/dev/null 2>&1 ; do
	   echo "waiting for $CONTAINER to become ready"
	   sleep 1
	done

	echo "reloading the influx databases"
	docker exec "$CONTAINER" influxd restore -portable "$INTERNALBACKUPDB"

	# are there any continuous queries to be reloaded?
	echo "Checking for optional continuous queries: $EXTERNALCQS"
	if [ -f "$EXTERNALCQS" ] ; then

		# yes! tell influx to load the file at the internal path)
		echo "   Telling influx to reload continuous queries"
		docker exec "$CONTAINER" influx -import -path "$INTERNALCQS"

	fi
	
	# does the hook script exist?
	echo "Checking for optional epilog: $EXTERNALEPILOG"
	if [ -f "$EXTERNALEPILOG" ] ; then

		# yes! copy hook script into the container at the working directory
		echo "   Epilog found - copying into container"
		docker cp "$EXTERNALEPILOG" "$CONTAINER:$INTERNALEPILOG"

		# tell influx to process the hook script (also in the working dir)
		echo "   Telling influx to process epilog"
		docker exec "$CONTAINER" influx -import -path "$INTERNALEPILOG"

		# the hook script vanishes the next time the container is
		# recreated so there is no need to clean up.

	else

		echo "   No epilog found"

	fi

	echo "The $CONTAINER databases should be good to go"

else

	echo "$CONTAINER must be running when $SCRIPT is started"

fi

echo "$SCRIPT completed"