#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER=${CONTAINER:-"influxdb"}
# default filename hard-coded for backwards compatibility
DEFAULTFILENAME=${DEFAULTFILENAME:-"influx-backup.tar"}

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# $1 is required and is either path to a .tar or the path to a folder
# $2 is optional and is the runtag (yyyy-mm-dd_hhmm.host-name)
# $3 is optional and overrides the default file name

case "$#" in

  1)
    BACKUP_TAR=$(realpath "$1")
    ;;

  2 | 3)
    BACKUP_TAR=$(realpath "$1/$2.${3:-"$DEFAULTFILENAME"}")
    ;;

  *)
    echo "Usage 1: $SCRIPT path/to/$DEFAULTFILENAME"
    echo "Usage 2: $SCRIPT path/to/backupdir runtag {override}"
    echo "         (override defaults to $DEFAULTFILENAME)"
    exit 1
    ;;

esac

# fail safe if the file already exists - no accidental overwrites
if [ -e "$BACKUP_TAR" ] ; then
   echo "Error: $BACKUP_TAR already exists - will not be overwritten"
   exit 1
fi

# assumptions
COMPOSENAME="docker-compose.yml"
CQSNAME="continuous-queries.influxql"
EPILOGNAME="iotstack_restore_$CONTAINER.epilog"

COMPOSE="$IOTSTACK/$COMPOSENAME"
BACKUPS="$IOTSTACK/backups"
EXTERNALEPILOG="$IOTSTACK/services/$CONTAINER/$EPILOGNAME"
INTERNALEPILOG="/$(uuidgen).epilog"
EXTERNALBACKUP="$BACKUPS/$CONTAINER"
EXTERNALBACKUPDB="$EXTERNALBACKUP/db"
INTERNALBACKUPDB="/var/lib/influxdb/backup"
INFLUXDATA="$IOTSTACK/volumes/$CONTAINER/data"
EXTERNALCQS="$EXTERNALBACKUPDB/$CQSNAME"
INTERNALCQS="$INTERNALBACKUPDB/$CQSNAME"

# is influxdb running?
if ! isContainerRunning "$CONTAINER" ; then
   echo "Warning: $CONTAINER container not running - backup skipped"
   exit 0
fi

# make sure the backups directory exists & has correct ownership & mode
[ -d "$BACKUPS" ] || mkdir -m 755 -p "$BACKUPS"
[ $(stat -c "%U:%G" "$BACKUPS") = "$USER:$USER" ] || sudo chown $USER:$USER "$BACKUPS"
[ $(stat -c "%a" "$BACKUPS") = "755" ] || sudo chmod 755 "$BACKUPS"

# make sure the influx backup directory exists & has correct ownership & mode
[ -d "$EXTERNALBACKUPDB" ] || sudo mkdir -m 755 -p "$EXTERNALBACKUPDB"
[ $(stat -c "%U:%G" "$EXTERNALBACKUP") = "root:root" ] || sudo chown -R root:root "$EXTERNALBACKUP"
[ $(stat -c "%a" "$EXTERNALBACKUP") = "755" ] || sudo chmod -R 755 "$EXTERNALBACKUP"

# now we can begin
echo "----- Starting $SCRIPT at $(date) -----"

# create the file (sets ownership)
touch "$BACKUP_TAR"

# the influx backup directory needs to be empty
if [ $(ls -1 "$EXTERNALBACKUPDB" | wc -l) -gt 0 ] ; then
   echo "Erasing $EXTERNALBACKUPDB"
   sudo rm "$EXTERNALBACKUPDB"/*
fi

# tell influx to perform the backup
echo "Telling influxd to create a portable backup"
docker exec "$CONTAINER" influxd backup -portable "$INTERNALBACKUPDB"

# attempt to collect any continuous queries
echo "Extracting any continuous queries"
docker exec influxdb bash -c \
	"influx -execute 'SHOW CONTINUOUS QUERIES' \
	| grep 'CREATE CONTINUOUS QUERY' \
	| sed 's/^.*CREATE CONTINUOUS QUERY/CREATE CONTINUOUS QUERY/g' \
	>$INTERNALCQS"

# remove if an empty file was created (ie no continuous queries)
[ -f "$EXTERNALCQS" -a ! -s "$EXTERNALCQS" ] && sudo rm "$EXTERNALCQS"

# sweep the backup into a tar (sudo is needed because backup files are
# created with owner root, group root, mode 600)
echo "Collecting the backup files into a tar"
sudo tar \
	-cf "$BACKUP_TAR" \
	-C "$EXTERNALBACKUPDB" \
	.

# report size of archive
du -h "$BACKUP_TAR"

echo "----- Finished $SCRIPT at $(date) -----"