#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER="${CONTAINER:-"influxdb"}"
# default filename hard-coded for backwards compatibility
DEFAULTFILENAME=${DEFAULTFILENAME:-"influx-backup.tar"}

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# $1 is required and is either path to a .tar or the path to a folder
# $2 is optional and is the runtag (yyyy-mm-dd_hhmm.host-name)
# $3 is optional and overrides the default file name

case "$#" in

  1)
    RESTORE_TAR=$(realpath "$1")
    ;;

  2 | 3)
    RESTORE_TAR=$(realpath "$1/$2.${3:-"$DEFAULTFILENAME"}")
    ;;

  *)
    echo "Usage 1: $SCRIPT path/to/$DEFAULTFILENAME"
    echo "Usage 2: $SCRIPT path/to/backupdir runtag {override}"
    echo "         (override defaults to $DEFAULTFILENAME)"
    exit 1
    ;;

esac

# it is an error if the restore tar does not exist
if [ ! -e "$RESTORE_TAR" ] ; then
   echo "Warning: $RESTORE_TAR does not exist - skipped"
   exit 0
fi

# assumptions
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"
BACKUPS="$IOTSTACK/backups"
INFLUXBACKUP="$BACKUPS/$CONTAINER"
INFLUXBACKUPDB="$INFLUXBACKUP/db"
INFLUXDATA="$IOTSTACK/volumes/$CONTAINER/data"

# check the key assumptions
if ! [ -d "$IOTSTACK" -a -e "$COMPOSE" ] ; then
   echo "Error: One of the following does not exist:"
   echo "   $IOTSTACK"
   echo "   $COMPOSE"
   echo "This may indicate a problem with your installation."
   exit 1
fi

# check that influxdb is not running
if isContainerRunning "$CONTAINER" ; then
   echo "Error: $CONTAINER should NOT be running at the start of a restore."
   echo "       Please deactivate and try again."
   exit 1
fi

# make sure the backups directory exists & has correct ownership & mode
[ -d "$BACKUPS" ] || mkdir -m 755 -p "$BACKUPS"
[ $(stat -c "%U:%G" "$BACKUPS") = "$USER:$USER" ] || sudo chown $USER:$USER "$BACKUPS"
[ $(stat -c "%a" "$BACKUPS") = "755" ] || sudo chmod 755 "$BACKUPS"

# make sure the influx backup directory exists & has correct ownership & mode
[ -d "$INFLUXBACKUPDB" ] || sudo mkdir -m 755 -p "$INFLUXBACKUPDB"
[ $(stat -c "%U:%G" "$INFLUXBACKUP") = "root:root" ] || sudo chown -R root:root "$INFLUXBACKUP"
[ $(stat -c "%a" "$INFLUXBACKUP") = "755" ] || sudo chmod -R 755 "$INFLUXBACKUP"

# now we can begin
echo "----- Starting $SCRIPT at $(date) -----"

# the influx backup directory needs to be empty
if [ $(ls -1 "$INFLUXBACKUPDB" | wc -l) -gt 0 ] ; then
   echo "Erasing $INFLUXBACKUPDB"
   sudo rm "$INFLUXBACKUPDB"/*
fi

# does the influx data root exist?
if [ -d "$INFLUXDATA" ] ; then

   # yes! it and its contents need to be erased
   echo "Erasing $INFLUXDATA"
   sudo rm -r "$INFLUXDATA"

fi

# unpack the restore tar
echo "unpacking $RESTORE_TAR"
sudo tar -x --same-owner -f "$RESTORE_TAR" -C "$INFLUXBACKUPDB"

# bring up the influxdb container (done early to give time to start)
echo "activating $CONTAINER (temporarily)"
docker-compose -f "$COMPOSE" up -d "$CONTAINER"

# wait for influx to be ready
while ! docker exec "$CONTAINER" curl -s "http://localhost:8086" >/dev/null 2>&1 ; do
   echo "waiting for $CONTAINER to become ready"
   sleep 1
done

# tell influx to perform the restore
echo "Telling influxd to restore a portable backup"
docker exec "$CONTAINER" influxd restore -portable /var/lib/influxdb/backup

# take down influxdb
echo "deactivating $CONTAINER"
docker-compose -f "$COMPOSE" rm --force --stop -v "$CONTAINER"

echo "----- Finished $SCRIPT at $(date) -----"

