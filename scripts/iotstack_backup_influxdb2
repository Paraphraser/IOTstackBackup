#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER=${CONTAINER:-"influxdb2"}
DEFAULTFILENAME=${DEFAULTFILENAME:-"$CONTAINER-backup.tar"}

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

# $1 is required and is either path to a .tar or the path to a folder
# $2 is optional and is the runtag (yyyy-mm-dd_hhmm.host-name)
# $3 is optional and overrides the default file name

case "$#" in

  1)
    BACKUP_TAR=$(realpath "$1")
    ;;

  2 | 3)
    BACKUP_TAR=$(realpath "$1/$2.${3:-"$DEFAULTFILENAME"}")
    ;;

  *)
    echo "Usage 1: $SCRIPT path/to/$DEFAULTFILENAME"
    echo "Usage 2: $SCRIPT path/to/backupdir runtag {override}"
    echo "         (override defaults to $DEFAULTFILENAME)"
    exit 1
    ;;

esac

# fail safe if the file already exists - no accidental overwrites
if [ -e "$BACKUP_TAR" ] ; then
   echo "Error: $BACKUP_TAR already exists - will not be overwritten"
   exit 1
fi

# assumptions
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"
INFLUXSTORE="$IOTSTACK/volumes/$CONTAINER"
INFLUXBACKUP="$INFLUXSTORE/backup"
INFLUXENGINE="./data/engine"

# is influxdb2 running?
if ! isContainerRunning "$CONTAINER" ; then
   echo "Warning: $CONTAINER container not running - backup skipped"
   exit 0
fi

# docker-compose should have created the path to the backup directory
if [ ! -d "$INFLUXBACKUP" ] ; then
   echo "$INFLUXBACKUP does not exist. This is usually created by docker-compose."
   echo "Has InfluxDB 2 been initialised properly?"
   exit 1
fi

# now we can begin
echo "----- Starting $SCRIPT at $(date) -----"

# create the file (sets ownership)
touch "$BACKUP_TAR"

# the influx backup directory needs to be empty
if [ $(ls -1 "$INFLUXBACKUP" | wc -l) -gt 0 ] ; then
   echo "Erasing $INFLUXBACKUP"
   sudo rm "$INFLUXBACKUP"/*
fi

# tell influx to perform the backup
echo "Telling InfluxDB 2 to create a backup"
docker exec "$CONTAINER" influx backup /var/lib/backup

# sweep the backup into a tar (sudo is needed because backup files are
# created with owner root, group root, mode 600)
echo "Collecting the backup files into a tar"
sudo tar \
	-cf "$BACKUP_TAR" \
	-C "$INFLUXSTORE" \
	--exclude="$INFLUXENGINE" \
	.

# report size of archive
du -h "$BACKUP_TAR"

echo "----- Finished $SCRIPT at $(date) -----"