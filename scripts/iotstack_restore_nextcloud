#!/usr/bin/env bash

# support user renaming of script
SCRIPT=$(basename "$0")

# should not run as root
[ "$EUID" -eq 0 ] && echo "$SCRIPT should NOT be run using sudo" && exit 1

# assumptions that can be overridden
IOTSTACK=${IOTSTACK:-"$HOME/IOTstack"}
CONTAINER="${CONTAINER:-"nextcloud"}"
DEFAULTFILENAME=${DEFAULTFILENAME:-"$CONTAINER-backup.tar.gz"}

# the project name is the all-lower-case form of the folder name
PROJECT=$(basename ${IOTSTACK,,})

# the database container is
CONTAINER_DB="${CONTAINER}_db"

# useful function
isContainerRunning() {
   if STATUS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/$1/json | jq .State.Status) ; then
      if [ "$STATUS" = "\"running\"" ] ; then
         return 0
      fi
   fi
   return 1
}

preferredCommand() {
   if [ -n "$(docker exec "$CONTAINER_DB" which "$1")" ] ; then
      echo "$1"
   else
      echo "$2"
   fi
}


# $1 is required and is either path to a .tar.gz or the path to a folder
# $2 is optional and is the runtag (yyyy-mm-dd_hhmm.host-name)
# $3 is optional and overrides the default file name

case "$#" in

  1)
    RESTORE_TAR_GZ=$(realpath "$1")
    ;;

  2 | 3)
    RESTORE_TAR_GZ=$(realpath "$1/$2.${3:-"$DEFAULTFILENAME"}")
    ;;

  *)
    echo "Usage 1: $SCRIPT path/to/$DEFAULTFILENAME"
    echo "Usage 2: $SCRIPT path/to/backupdir runtag {override}"
    echo "         (override defaults to $DEFAULTFILENAME)"
    exit 1
    ;;

esac

# it is an error if the restore tar does not exist
if [ ! -e "$RESTORE_TAR_GZ" ] ; then
   echo "Warning: $RESTORE_TAR_GZ does not exist - skipped"
   exit 0
fi

# assumptions
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"
VOLUMES="$IOTSTACK/volumes"
NEXTCLOUD_VOLUMES="$VOLUMES/$CONTAINER"
NEXTCLOUD_DB_NAME="db"
NEXTCLOUD_DB_BACKUP_NAME="db_backup"
NEXTCLOUD_HTML_NAME="html"
NEXTCLOUD_DB="$NEXTCLOUD_VOLUMES/$NEXTCLOUD_DB_NAME"
NEXTCLOUD_DB_BACKUP="$NEXTCLOUD_VOLUMES/$NEXTCLOUD_DB_BACKUP_NAME"
NEXTCLOUD_HTML="$NEXTCLOUD_VOLUMES/$NEXTCLOUD_HTML_NAME"

# check the key assumptions
if ! [ -d "$IOTSTACK" -a -e "$COMPOSE" ] ; then
   echo "Error: One of the following does not exist:"
   echo "   $IOTSTACK"
   echo "   $COMPOSE"
   echo "This may indicate a problem with your installation."
   exit 1
fi

# check that containers are not running
if isContainerRunning "$CONTAINER" || isContainerRunning "$CONTAINER_DB" ; then
   echo "Warning: Neither $CONTAINER nor $CONTAINER_DB should be running at"
   echo "         the start of a restore. Please deactivate both and try again."
   exit 0
fi

# now we can begin
echo "----- Starting $SCRIPT at $(date) -----"

# make a temporary directory to unpack into
RESTOREDIR=$(mktemp -d -p "$IOTSTACK")

# unpack the general backup into the temporary directory
echo "unpacking $RESTORE_TAR_GZ"
sudo tar -x --same-owner -z -f "$RESTORE_TAR_GZ" -C "$RESTOREDIR"

# define restored structures in terms of the temporary directory
NEXTCLOUD_DB_RESTOREDIR="$RESTOREDIR/$NEXTCLOUD_DB_BACKUP_NAME"
NEXTCLOUD_HTML_RESTOREDIR="$RESTOREDIR/$NEXTCLOUD_HTML_NAME"

# was a "db_backup" directory restored?
if [ -d "$NEXTCLOUD_DB_RESTOREDIR" ] ; then

   # make sure the nextcloud_db backup directory exists & has correct ownership & mode
   [ -d "$NEXTCLOUD_DB_BACKUP" ] || sudo mkdir -m 755 -p "$NEXTCLOUD_DB_BACKUP"
   [ $(stat -c "%U:%G" "$NEXTCLOUD_DB_BACKUP") = "$USER:$USER" ] || sudo chown $USER:$USER "$NEXTCLOUD_DB_BACKUP"
   [ $(stat -c "%a" "$NEXTCLOUD_DB_BACKUP") = "755" ] || sudo chmod 755 "$NEXTCLOUD_DB_BACKUP"

   # make sure the nextcloud_db runtime directory exists & has correct ownership & mode
   [ -d "$NEXTCLOUD_DB" ] || sudo mkdir -m 755 -p "$NEXTCLOUD_DB"
   [ $(stat -c "%U:%G" "$NEXTCLOUD_DB") = "$USER:$USER" ] || sudo chown $USER:$USER "$NEXTCLOUD_DB"
   [ $(stat -c "%a" "$NEXTCLOUD_DB") = "755" ] || sudo chmod 755 "$NEXTCLOUD_DB"

   # the target directory should be empty
   if [ $(ls -1 "$NEXTCLOUD_DB_BACKUP" | wc -l) -gt 0 ] ; then
      echo "Erasing $NEXTCLOUD_DB_BACKUP"
      sudo rm -rf "$NEXTCLOUD_DB_BACKUP"/*
   fi

   # so should the nextcloud_db runtime directory
   if [ $(ls -1 "$NEXTCLOUD_DB" | wc -l) -gt 0 ] ; then
      echo "Erasing $NEXTCLOUD_DB"
      sudo rm -rf "$NEXTCLOUD_DB"/*
   fi

   # iterate the restored contents
   for SPATH in "$NEXTCLOUD_DB_RESTOREDIR"/* ; do

      SNAME=$(basename "$SPATH")
      DPATH="$NEXTCLOUD_DB_BACKUP/$SNAME"

      echo "moving restored $SNAME into place"
      sudo mv "$SPATH" "$DPATH"

   done

fi

# was the "html" directory restored?
if [ -d "$NEXTCLOUD_HTML_RESTOREDIR" ] ; then

   # make sure the html runtime directory exists and has correct permissions
   [ -d "$NEXTCLOUD_HTML" ] || sudo mkdir -m 755 -p "$NEXTCLOUD_HTML"
   [ $(stat -c "%U:%G" "$NEXTCLOUD_HTML") = "www-data:root" ] || sudo chown -R www-data:root "$NEXTCLOUD_HTML"
   [ $(stat -c "%a" "$NEXTCLOUD_HTML") = "755" ] || sudo chmod 755 "$NEXTCLOUD_HTML"

   # but we do NOT erase it! This process is a "merge"
   
   # iterate the restored contents
   for SPATH in "$NEXTCLOUD_HTML_RESTOREDIR"/* ; do

      SNAME=$(basename "$SPATH")
      DPATH="$NEXTCLOUD_HTML/$SNAME"

      echo "removing old $DPATH"
      sudo rm -rf  "$DPATH"

      echo "moving restored $SNAME into place"
      sudo mv "$SPATH" "$DPATH"

   done

fi

echo "cleaning up intermediate files"
rm -rf "$RESTOREDIR"

# bring up the nextcloud_db container (done early to give time to start)
echo "activating $CONTAINER_DB (temporarily)"
docker-compose -f "$COMPOSE" up -d "$CONTAINER_DB"

# extra stabilisation time - prophylactic
sleep 3

# wait for mariadb (nextcloud_db) to be ready for business
echo "waiting for $CONTAINER_DB to start"
RETRIES=30
while : ; do

   # see if nextcloud_db reports itself ready for business
   docker exec "$CONTAINER_DB" iotstack_healthcheck.sh >/dev/null 2>&1

   # is the container ready?
   if [ $? -ne 0 ] ; then

      # no! decrement the retry counter
      let "RETRIES-=1"

      # should we retry?
      if [ $RETRIES -gt 0 ] ; then

         # yes! wait, then retry
         sleep 1 ; echo "  re-trying ($RETRIES) ..." ; continue

      fi

      # retries exhausted - declare failure
      echo "$CONTAINER_DB did not come up properly - unable to reload database"
      exit 1

   fi

   # healthcheck passed
   break;

done

# extra stabilisation time - prophylactic
sleep 3

# try to ensure the container has a root password
echo "checking whether $CONTAINER_DB has a root password (ignore any errors)"
echo "(refer https://github.com/linuxserver/docker-mariadb/issues/163)"
docker exec "$CONTAINER_DB" bash -c "$(preferredCommand mariadb-admin mysqladmin) -u root password \$MYSQL_ROOT_PASSWORD"

# tell nextcloud_db to perform the restore
echo "telling $CONTAINER_DB to restore a portable backup"
docker exec "$CONTAINER_DB" bash -c "$(preferredCommand mariadb mysql) -p\$MYSQL_ROOT_PASSWORD \$MYSQL_DATABASE </backup/backup.sql"

# extra stabilisation time - prophylactic
sleep 3

echo "activating $CONTAINER (temporarily)"
docker-compose -f "$COMPOSE" up -d "$CONTAINER"

echo "waiting for $CONTAINER to start"
RETRIES=30
while : ; do

   # is the container listening on port 9321?
   if nc -w 1 127.0.0.1 9321 ; then

      # yes! attempt to fetch data from the port
      wget -O- -t 24 -w 5 http://127.0.0.1:9321 >/dev/null 2>&1

      # leave the while loop on success
      if [ $? -eq 8 ] ; then break ; fi

   fi

   # decrement the retry counter
   let "RETRIES-=1"

   # should we retry?
   if [ $RETRIES -gt 0 ] ; then

      # yes! wait, then retry
      sleep 1 ; echo "  re-trying ($RETRIES) ..." ; continue

   fi

   # retries exhausted - declare failure
   echo "$CONTAINER did not come up properly"
   echo " - unable to ensure $CONTAINER is taken out of maintenance mode"
   exit 1

done

# extra stabilisation time - prophylactic
sleep 3

echo "Taking $CONTAINER out of maintenance mode"
docker exec -u www-data -it "$CONTAINER" php occ maintenance:mode --off

# take down nextcloud service
echo "deactivating $CONTAINER and $CONTAINER_DB"
docker-compose -f "$COMPOSE" rm --force --stop -v "$CONTAINER" "$CONTAINER_DB"

echo "----- Finished $SCRIPT at $(date) -----"
